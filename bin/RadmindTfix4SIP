#!/bin/bash
#
# Short:    Process a Radmind transcript to be compatible with SIP on OSX
# Version:  1.0.9, 09-Oct-2018
# Author:   Mark J Swift
#
# Usage:    
#   RadmindTfix4SIP SourceTranscriptFile [DestTranscriptFile]

# ---

# Take a note when this script started running
sv_ThisScriptStartEpoch=$(date -u "+%s")

# Full soucre of this script
sv_ThisScriptFilePath="${0}"

# Filename of this script
sv_ThisScriptFileName="$(basename "${sv_ThisScriptFilePath}")"

# Path to this script
sv_ThisScriptDirPath="$(dirname "${sv_ThisScriptFilePath}")"

# ---

sv_RadCmdDir="/usr/local/bin"
if ! test -f "${sv_RadCmdDir}"/lsort
then
  sv_RadCmdDir="${sv_ThisScriptDirPath}"/bin
fi

if ! test -f "${sv_RadCmdDir}"/lsort
then
  sv_RadCmdDir="${sv_ThisScriptDirPath}"
fi

if ! test -f "${sv_RadCmdDir}"/lsort
then
  echo 1>&2 "Error: Please install the Radmind tools"
  exit 0
fi

# ---

# Get user name
sv_ThisUserName="$(whoami)"

# ---

if [ "${sv_ThisUserName}" != "root" ]
then
  echo >&2 "${sv_ThisScriptFileName}: Permission error, you must be root to run this script."
  exit 0
fi

# ---
# We are root
# ---

# Get parameter(s)
sv_SrcTranscriptFilePath="${1}"
if test -z "${sv_SrcTranscriptFilePath}"
then
  echo 1>&2 "${sv_ThisScriptFileName}: Syntax, ${sv_ThisScriptFileName} SourceTranscriptFile [DestTranscriptFile]"
  exit 0
fi

if ! test -e "${sv_SrcTranscriptFilePath}"
then
  echo 1>&2 "${sv_ThisScriptFileName}: File not found, ${sv_SrcTranscriptFilePath}"
  exit 0
fi

sv_SrcTranscriptFileName="$(basename "${sv_SrcTranscriptFilePath}")"

# ---

sv_DstTranscriptFilePath="${2}"
if test -z "${sv_DstTranscriptFilePath}"
then
  sv_DstTranscriptFilePath="${sv_SrcTranscriptFilePath}"
  
fi

sv_DstTranscriptFileName="$(basename "${sv_DstTranscriptFilePath}")"

# ---

# Get system info
sv_SystemVersionStampAsString=$(sw_vers -productVersion)
iv_SystemVersionStampAsNumber=0
for num in $(echo ${sv_SystemVersionStampAsString}".0.0.0.0" | cut -d"." -f1-4 | tr "." "\n")
do
  iv_SystemVersionStampAsNumber=$((${iv_SystemVersionStampAsNumber}*256+${num}))
done

# ---

# Should we look for (and exclude) files with an extended attributes of type com.apple.rootless
sv_FindRootlessAttributes="yes"

if [ ${iv_SystemVersionStampAsNumber} -lt 168493056 ]
then
  # If we are on a pre 10.11 system without SIP, we might still want to exclude the SIP files
  sv_RootlessConfFilePath="${sv_ThisScriptDirPath}/rootless.conf"

  # However, we don't want to look for com.apple.rootless extended attributes
  sv_FindRootlessAttributes="no"
  
else
  # This file contains a list of protected dirs
  sv_RootlessConfFilePath="/System/Library/Sandbox/rootless.conf"
  
fi

# ---

if ! test -e "${sv_RootlessConfFilePath}"
then
  echo 1>&2 "${sv_ThisScriptFileName}: File not found, ${sv_RootlessConfFilePath}"
  exit 0
fi

# ---

echo 1>&2 "${sv_ThisScriptFileName}: Processing ${sv_SrcTranscriptFileName}"

# ---

# Create a temporary directory
sv_TmpDir=$(mktemp -d "/tmp/$(basename ${0}).XXXXXXXX")

sv_TmpTranscriptFilePath="${sv_TmpDir}/${sv_DstTranscriptFileName}"

# ---

sv_CTLM=$(echo "a" | tr "a" "\015")

# ---

# First check if we are case sensitive or not
cat "${sv_SrcTranscriptFilePath}" | grep -E "^([+-] )?. " > "${sv_TmpDir}"/tmp1.T
"${sv_RadCmdDir}"/lsort -I "${sv_TmpDir}"/tmp1.T > "${sv_TmpDir}"/tmp2.T
if test -z "$(diff -q "${sv_TmpDir}"/tmp1.T "${sv_TmpDir}"/tmp2.T)"
then
  sv_SortOption="-I"
  
else
  sv_SortOption=""
  
fi

# ---

# First check if w have already created the SIP exclude file
if [ ! -e "/tmp/${sv_ThisScriptFileName}-SIP-inc.T" ]
then

  # Calculate what we need to exclude
  cat "${sv_RootlessConfFilePath}" | sort -u | grep -E "^\t" | tr -d "\t" | grep -Ev "/\*$" > "${sv_TmpDir}"/exc.txt

  # Calculate what we need to include
  cat "${sv_RootlessConfFilePath}" | sort -u | grep -E "^\*" | sed "s|^\*||" | tr -d "\t" > "${sv_TmpDir}"/inc.txt
  
  # Calculate what includes should actually be excluded
  cat "${sv_RootlessConfFilePath}" | sort -u | grep -E "/\*$" | tr -d "\t" | sed "s|/\*$||" > "${sv_TmpDir}"/iex.txt

  # Calculate what actually needs to be included
  echo "$(echo "$(cat "${sv_TmpDir}"/inc.txt;cat "${sv_TmpDir}"/iex.txt)" | sort | uniq; cat "${sv_TmpDir}"/iex.txt)" | sort | uniq -u > /tmp/${sv_ThisScriptFileName}-SIP-inc.T

  # Calculate what actually needs to be excluded
  echo "$(cat "${sv_TmpDir}"/exc.txt;cat "${sv_TmpDir}"/iex.txt)" | sort | uniq > "${sv_TmpDir}"/exc2.txt
  
  if [ "${sv_FindRootlessAttributes}" = "yes" ]
  then
    # Find files that have a com.apple.rootless extended attribute (takes a while).

    # Work out which mounted directories to ignore when searching for restricted files
    sv_PrunePathsMounts="$(mount | sed -E 's|(^.*) on (.*) (\(.*\))|\2|' | grep -v '^/$' | sed "s|^|-path '|;s|$|' -prune -o|" | tr "\n" " " | sed "s|$|-path '/*'|" )"

    # Full list of directories to ignore when searching for restricted files
    sv_PrunePaths="$(echo "${sv_PrunePathsMounts}" | sed "s|^|\\\( |;s|$| \\\) -and |")"

    # Build the find command in a string
    sv_FindCommand="/usr/bin/find / ${sv_PrunePaths} -and -xattrname com.apple.rootless -exec echo {} \;"

    cp "${sv_TmpDir}"/exc2.txt "${sv_TmpDir}"/exc3.txt
    eval "${sv_FindCommand}" >> "${sv_TmpDir}"/exc3.txt
    cat "${sv_TmpDir}"/exc3.txt | sort | uniq > /tmp/${sv_ThisScriptFileName}-SIP-exc.T

  else
    cp "${sv_TmpDir}"/exc2.txt /tmp/${sv_ThisScriptFileName}-SIP-exc.T

  fi
fi

# Calculate what we need to exclude from the transcript
sv_Pattern=""
while read sv_RootlessExclude
do
  sv_RootlessExclude=$(echo "${sv_RootlessExclude}" | sed 's|\\|\\\\|g;s| |\\b|g;s|''${sv_CTLM}''|\\r|g' | sed 's|\\|\\\\|g;s|\[|\\\[|g;s|\]|\\\]|g;s|(|\\\(|g;s|)|\\\)|g;s|\.|\\\.|g;s|\^|\\\^|g;s|\$|\\\$|g;s|\?|\\\?|g;s|\*|\\\*|g;s|\+|\\\+|g')
  sv_Pattern="${sv_Pattern}|^([+-] )?. ${sv_RootlessExclude}"
done < <(cat /tmp/${sv_ThisScriptFileName}-SIP-exc.T)
sv_Pattern=$(echo "${sv_Pattern}" | sed 's/^|//g')
cat "${sv_SrcTranscriptFilePath}" | grep -E "${sv_Pattern}" > "${sv_TmpDir}"/exc.T

# Calculate what we need to include
sv_Pattern=""
while read sv_RootlessInclude
do
  sv_RootlessInclude=$(echo "${sv_RootlessInclude}" | sed 's|\\|\\\\|g;s| |\\b|g;s|''${sv_CTLM}''|\\r|g' | sed 's|\\|\\\\|g;s|\[|\\\[|g;s|\]|\\\]|g;s|(|\\\(|g;s|)|\\\)|g;s|\.|\\\.|g;s|\^|\\\^|g;s|\$|\\\$|g;s|\?|\\\?|g;s|\*|\\\*|g;s|\+|\\\+|g')
  sv_Pattern="${sv_Pattern}|^([+-] )?. ${sv_RootlessInclude}"
done < <(cat /tmp/${sv_ThisScriptFileName}-SIP-inc.T)
sv_Pattern=$(echo "${sv_Pattern}" | sed 's/^|//g')
cat "${sv_SrcTranscriptFilePath}" | grep -E "${sv_Pattern}" > "${sv_TmpDir}"/inc.T

# ---

# Anything in the includes needs to be removed from the excludes
cp "${sv_TmpDir}"/exc.T "${sv_TmpDir}"/tmp.T
cat "${sv_TmpDir}"/inc.T >> "${sv_TmpDir}"/tmp.T
cat "${sv_TmpDir}"/inc.T >> "${sv_TmpDir}"/tmp.T
cat "${sv_TmpDir}"/tmp.T | sort | uniq -u | "${sv_RadCmdDir}"/lsort ${sv_SortOption} > "${sv_TmpDir}"/exc.T

# ---

# Remove the remaining excludes from the main transcript (also exclude / if included)
diff "${sv_SrcTranscriptFilePath}" "${sv_TmpDir}"/exc.T --suppress-common-lines | grep "^< " | sed "s|^< ||" | grep -v "^d / " > "${sv_TmpTranscriptFilePath}"

# ---
  
# Check src transcript against processed transcript
sv_SrcTranscriptSha256="$(cat "${sv_SrcTranscriptFilePath}" | openssl dgst -sha256)"
sv_TmpTranscriptSha256="$(cat "${sv_TmpTranscriptFilePath}" | openssl dgst -sha256)"

if [ "${sv_SrcTranscriptSha256}" = "${sv_TmpTranscriptSha256}" ]
then
  echo 1>&2 "${sv_ThisScriptFileName}: No changes made"
  if [ "${sv_SrcTranscriptFilePath}" != "${sv_DstTranscriptFilePath}" ]
  then
    cp -pf "${sv_SrcTranscriptFilePath}" "${sv_DstTranscriptFilePath}"
  fi
else
  echo 1>&2 "${sv_ThisScriptFileName}: Changes made"
  cp -pf "${sv_TmpTranscriptFilePath}" "${sv_DstTranscriptFilePath}"
fi

# Get rid of temporary files
rm -fR "${sv_TmpDir}"

# All done
echo 1>&2 "${sv_ThisScriptFileName}: Complete, processed ${sv_SrcTranscriptFileName} in "$(($(date -u "+%s")-${sv_ThisScriptStartEpoch}))" seconds"
